# Autogenerated from a Treetop grammar. Edits may be lost.


# See http://tools.ietf.org/html/rfc1459#section-2.3.1

module IrcMessage
  include Treetop::Runtime

  def root
    @root ||= :message
  end

  module Message0
    def command
      elements[1]
    end

    def params
      elements[2]
    end
  end

  def _nt_message
    start_index = index
    if node_cache[:message].has_key?(index)
      cached = node_cache[:message][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_prefix_expression
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_command
      s0 << r3
      if r3
        r4 = _nt_params
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Message0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:message][start_index] = r0

    r0
  end

  module PrefixExpression0
    def origin
      elements[1]
    end

    def whitespace
      elements[2]
    end
  end

  def _nt_prefix_expression
    start_index = index
    if node_cache[:prefix_expression].has_key?(index)
      cached = node_cache[:prefix_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(':', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(':')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_origin
      s0 << r2
      if r2
        r3 = _nt_whitespace
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PrefixExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:prefix_expression][start_index] = r0

    r0
  end

  module Origin0
    def type
      :server
    end
  end

  module Origin1
    def type
      :client
    end
  end

  def _nt_origin
    start_index = index
    if node_cache[:origin].has_key?(index)
      cached = node_cache[:origin][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_server_name
    r1.extend(Origin0)
    if r1
      r0 = r1
    else
      r2 = _nt_user_name
      r2.extend(Origin1)
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:origin][start_index] = r0

    r0
  end

  def _nt_server_name
    start_index = index
    if node_cache[:server_name].has_key?(index)
      cached = node_cache[:server_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_host_name

    node_cache[:server_name][start_index] = r0

    r0
  end

  module HostName0
    def host_part
      elements[0]
    end

  end

  module HostName1
  end

  def _nt_host_name
    start_index = index
    if node_cache[:host_name].has_key?(index)
      cached = node_cache[:host_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2, s2 = index, []
      r3 = _nt_host_part
      s2 << r3
      if r3
        if has_terminal?('.', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r4 = nil
        end
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(HostName0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      r6 = _nt_host_part
      if r6
        r5 = r6
      else
        r5 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(HostName1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:host_name][start_index] = r0

    r0
  end

  def _nt_host_part
    start_index = index
    if node_cache[:host_part].has_key?(index)
      cached = node_cache[:host_part][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[a-zA-Z0-9\\-]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:host_part][start_index] = r0

    r0
  end

  module UserName0
    def nick
      elements[0]
    end

  end

  def _nt_user_name
    start_index = index
    if node_cache[:user_name].has_key?(index)
      cached = node_cache[:user_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_nick
    s0 << r1
    if r1
      r3 = _nt_user_info
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UserName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:user_name][start_index] = r0

    r0
  end

  module Nick0
  end

  def _nt_nick
    start_index = index
    if node_cache[:nick].has_key?(index)
      cached = node_cache[:nick][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_alpha
    if r2
      r1 = r2
    else
      r3 = _nt_special
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        i5 = index
        r6 = _nt_alphanumeric
        if r6
          r5 = r6
        else
          r7 = _nt_special
          if r7
            r5 = r7
          else
            @index = i5
            r5 = nil
          end
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Nick0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:nick][start_index] = r0

    r0
  end

  module UserInfo0
    def user
      elements[1]
    end

    def host_or_cloak
      elements[3]
    end
  end

  module UserInfo1
    def user
      elements[1]
    end
  end

  module UserInfo2
    def host_or_cloak; nil; end
  end

  module UserInfo3
    def host_or_cloak
      elements[1]
    end
  end

  module UserInfo4
    def user; nil; end
  end

  def _nt_user_info
    start_index = index
    if node_cache[:user_info].has_key?(index)
      cached = node_cache[:user_info][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?('!', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('!')
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_user
      s1 << r3
      if r3
        if has_terminal?('@', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('@')
          r4 = nil
        end
        s1 << r4
        if r4
          r5 = _nt_host_or_cloak
          s1 << r5
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(UserInfo0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i6, s6 = index, []
      if has_terminal?('!', false, index)
        r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('!')
        r7 = nil
      end
      s6 << r7
      if r7
        r8 = _nt_user
        s6 << r8
      end
      if s6.last
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        r6.extend(UserInfo1)
      else
        @index = i6
        r6 = nil
      end
      if r6
        r0 = r6
      else
        i9, s9 = index, []
        if has_terminal?('@', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('@')
          r10 = nil
        end
        s9 << r10
        if r10
          r11 = _nt_host_or_cloak
          s9 << r11
        end
        if s9.last
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          r9.extend(UserInfo3)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r0 = r9
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:user_info][start_index] = r0

    r0
  end

  def _nt_user
    start_index = index
    if node_cache[:user].has_key?(index)
      cached = node_cache[:user][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[^ \\000\\r\\n@]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:user][start_index] = r0

    r0
  end

  def _nt_host_or_cloak
    start_index = index
    if node_cache[:host_or_cloak].has_key?(index)
      cached = node_cache[:host_or_cloak][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_ip_address
    if r1
      r0 = r1
    else
      r2 = _nt_host_name
      if r2
        r0 = r2
      else
        r3 = _nt_cloak
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:host_or_cloak][start_index] = r0

    r0
  end

  module IpAddress0
    def ipv4_part1
      elements[0]
    end

    def ipv4_part2
      elements[2]
    end

    def ipv4_part3
      elements[4]
    end

    def ipv4_part4
      elements[6]
    end

  end

  module IpAddress1
    def ipv6_part1
      elements[0]
    end

    def ipv6_part2
      elements[2]
    end

    def ipv6_part3
      elements[4]
    end

    def ipv6_part4
      elements[6]
    end

    def ipv6_part5
      elements[8]
    end

    def ipv6_part6
      elements[10]
    end

    def ipv6_part7
      elements[12]
    end

    def ipv6_part8
      elements[14]
    end
  end

  def _nt_ip_address
    start_index = index
    if node_cache[:ip_address].has_key?(index)
      cached = node_cache[:ip_address][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_ipv4_part
    s1 << r2
    if r2
      if has_terminal?('.', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('.')
        r3 = nil
      end
      s1 << r3
      if r3
        r4 = _nt_ipv4_part
        s1 << r4
        if r4
          if has_terminal?('.', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r5 = nil
          end
          s1 << r5
          if r5
            r6 = _nt_ipv4_part
            s1 << r6
            if r6
              if has_terminal?('.', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('.')
                r7 = nil
              end
              s1 << r7
              if r7
                r8 = _nt_ipv4_part
                s1 << r8
                if r8
                  i9 = index
                  if has_terminal?('.', false, index)
                    r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('.')
                    r10 = nil
                  end
                  if r10
                    r9 = nil
                  else
                    @index = i9
                    r9 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s1 << r9
                end
              end
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(IpAddress0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i11, s11 = index, []
      r12 = _nt_ipv6_part
      s11 << r12
      if r12
        if has_terminal?(':', false, index)
          r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(':')
          r13 = nil
        end
        s11 << r13
        if r13
          r14 = _nt_ipv6_part
          s11 << r14
          if r14
            if has_terminal?(':', false, index)
              r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r15 = nil
            end
            s11 << r15
            if r15
              r16 = _nt_ipv6_part
              s11 << r16
              if r16
                if has_terminal?(':', false, index)
                  r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(':')
                  r17 = nil
                end
                s11 << r17
                if r17
                  r18 = _nt_ipv6_part
                  s11 << r18
                  if r18
                    if has_terminal?(':', false, index)
                      r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(':')
                      r19 = nil
                    end
                    s11 << r19
                    if r19
                      r20 = _nt_ipv6_part
                      s11 << r20
                      if r20
                        if has_terminal?(':', false, index)
                          r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure(':')
                          r21 = nil
                        end
                        s11 << r21
                        if r21
                          r22 = _nt_ipv6_part
                          s11 << r22
                          if r22
                            if has_terminal?(':', false, index)
                              r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure(':')
                              r23 = nil
                            end
                            s11 << r23
                            if r23
                              r24 = _nt_ipv6_part
                              s11 << r24
                              if r24
                                if has_terminal?(':', false, index)
                                  r25 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                  @index += 1
                                else
                                  terminal_parse_failure(':')
                                  r25 = nil
                                end
                                s11 << r25
                                if r25
                                  r26 = _nt_ipv6_part
                                  s11 << r26
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if s11.last
        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
        r11.extend(IpAddress1)
      else
        @index = i11
        r11 = nil
      end
      if r11
        r0 = r11
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:ip_address][start_index] = r0

    r0
  end

  module Ipv4Part0
  end

  def _nt_ipv4_part
    start_index = index
    if node_cache[:ipv4_part].has_key?(index)
      cached = node_cache[:ipv4_part][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[0-9]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[0-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('\G[0-9]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Ipv4Part0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ipv4_part][start_index] = r0

    r0
  end

  module Ipv6Part0
  end

  def _nt_ipv6_part
    start_index = index
    if node_cache[:ipv6_part].has_key?(index)
      cached = node_cache[:ipv6_part][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-f0-9]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('\G[a-f0-9]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        if has_terminal?('\G[a-f0-9]', true, index)
          r6 = true
          @index += 1
        else
          r6 = nil
        end
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          if has_terminal?('\G[a-f0-9]', true, index)
            r8 = true
            @index += 1
          else
            r8 = nil
          end
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Ipv6Part0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ipv6_part][start_index] = r0

    r0
  end

  module Cloak0
  end

  module Cloak1
  end

  def _nt_cloak
    start_index = index
    if node_cache[:cloak].has_key?(index)
      cached = node_cache[:cloak][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2 = index
      r3 = _nt_alpha
      if r3
        r2 = r3
      else
        r4 = _nt_special
        if r4
          r2 = r4
        else
          if has_terminal?('.', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('.')
            r5 = nil
          end
          if r5
            r2 = r5
          else
            @index = i2
            r2 = nil
          end
        end
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      s6, i6 = [], index
      loop do
        i7, s7 = index, []
        if has_terminal?('/', false, index)
          r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('/')
          r8 = nil
        end
        s7 << r8
        if r8
          s9, i9 = [], index
          loop do
            i10 = index
            r11 = _nt_alphanumeric
            if r11
              r10 = r11
            else
              r12 = _nt_special
              if r12
                r10 = r12
              else
                if has_terminal?('.', false, index)
                  r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('.')
                  r13 = nil
                end
                if r13
                  r10 = r13
                else
                  @index = i10
                  r10 = nil
                end
              end
            end
            if r10
              s9 << r10
            else
              break
            end
          end
          if s9.empty?
            @index = i9
            r9 = nil
          else
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          end
          s7 << r9
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(Cloak0)
        else
          @index = i7
          r7 = nil
        end
        if r7
          s6 << r7
        else
          break
        end
      end
      if s6.empty?
        @index = i6
        r6 = nil
      else
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
      end
      s0 << r6
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Cloak1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:cloak][start_index] = r0

    r0
  end

  module Command0
  end

  def _nt_command
    start_index = index
    if node_cache[:command].has_key?(index)
      cached = node_cache[:command][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[a-zA-Z]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    if r1
      r0 = r1
    else
      i3, s3 = index, []
      if has_terminal?('\G[0-9]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      s3 << r4
      if r4
        if has_terminal?('\G[0-9]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        s3 << r5
        if r5
          if has_terminal?('\G[0-9]', true, index)
            r6 = true
            @index += 1
          else
            r6 = nil
          end
          s3 << r6
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Command0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r0 = r3
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:command][start_index] = r0

    r0
  end

  module Params0
    def trailing
      elements[1]
    end
  end

  module Params1
    def middle
      elements[0]
    end

    def params
      elements[1]
    end
  end

  module Params2
    def whitespace
      elements[0]
    end

  end

  def _nt_params
    start_index = index
    if node_cache[:params].has_key?(index)
      cached = node_cache[:params][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_whitespace
    s0 << r1
    if r1
      i3 = index
      i4, s4 = index, []
      if has_terminal?(':', false, index)
        r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(':')
        r5 = nil
      end
      s4 << r5
      if r5
        r6 = _nt_trailing
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(Params0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        i7, s7 = index, []
        r8 = _nt_middle
        s7 << r8
        if r8
          r9 = _nt_params
          s7 << r9
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(Params1)
        else
          @index = i7
          r7 = nil
        end
        if r7
          r3 = r7
        else
          @index = i3
          r3 = nil
        end
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Params2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:params][start_index] = r0

    r0
  end

  def _nt_trailing
    start_index = index
    if node_cache[:trailing].has_key?(index)
      cached = node_cache[:trailing][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if index < input_length
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:trailing][start_index] = r0

    r0
  end

  module Middle0
  end

  def _nt_middle
    start_index = index
    if node_cache[:middle].has_key?(index)
      cached = node_cache[:middle][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[^:\\s]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[^\\s]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Middle0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:middle][start_index] = r0

    r0
  end

  def _nt_whitespace
    start_index = index
    if node_cache[:whitespace].has_key?(index)
      cached = node_cache[:whitespace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(' ', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(' ')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:whitespace][start_index] = r0

    r0
  end

  def _nt_special
    start_index = index
    if node_cache[:special].has_key?(index)
      cached = node_cache[:special][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[_\\-\\[\\]\\\\`^{}|]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:special][start_index] = r0

    r0
  end

  def _nt_alpha
    start_index = index
    if node_cache[:alpha].has_key?(index)
      cached = node_cache[:alpha][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-zA-Z]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:alpha][start_index] = r0

    r0
  end

  def _nt_alphanumeric
    start_index = index
    if node_cache[:alphanumeric].has_key?(index)
      cached = node_cache[:alphanumeric][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[a-zA-Z0-9]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:alphanumeric][start_index] = r0

    r0
  end

end

class IrcMessageParser < Treetop::Runtime::CompiledParser
  include IrcMessage
end

