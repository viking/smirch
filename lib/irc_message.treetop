# See http://tools.ietf.org/html/rfc1459#section-2.3.1

grammar IrcMessage
  rule message
    prefix_expression command params
  end

  rule prefix_expression
    ':' origin whitespace
  end

  rule origin
    server_name {
      def type
        :server
      end
    }
    /
    user_name {
      def type
        :client
      end
    }
  end

  rule server_name
    host_name
  end

  # ChanServ's hostname is 'services.'
  rule host_name
    (host_part '.')+ host_part?
  end

  rule host_part
    [a-zA-Z0-9\-]+
  end

  rule user_name
    nick user_info?
  end

  rule nick
    (alpha / special) (alphanumeric / special)+
  end

  rule user_info
    ('!' user '@' host_or_cloak)
    /
    ('!' user) {
      def host_or_cloak; nil; end
    }
    /
    ('@' host_or_cloak) {
      def user; nil; end
    }
  end

  rule user
    [^ \000\r\n@]+
  end

  rule host_or_cloak
    ip_address / host_name / cloak
  end

  rule ip_address
    ( ipv4_part '.' ipv4_part '.' ipv4_part '.' ipv4_part )
    /
    ( ipv6_part ':' ipv6_part ':' ipv6_part ':' ipv6_part ':' ipv6_part ':' ipv6_part ':' ipv6_part ':' ipv6_part )
  end

  rule ipv4_part
    [0-9] [0-9]? [0-9]?
  end

  rule ipv6_part
    [a-f0-9]? [a-f0-9]? [a-f0-9]? [a-f0-9]?
  end

  # I don't actually know what the exact format for this is.
  rule cloak
    (alpha / special)+ ('/' (alphanumeric / special)+)+
  end

  rule command
    [a-zA-Z]+ / ([0-9] [0-9] [0-9])
  end

  rule params
    whitespace (
      (':' trailing)
      /
      (middle params)
    )?
  end

  rule trailing
    .*
  end

  rule middle
    [^:\s] [^\s]*
  end

  rule whitespace
    ' '*
  end

  rule special
    [_\-\[\]\\`^{}|]
  end

  rule alpha
    [a-zA-Z]
  end

  rule alphanumeric
    [a-zA-Z0-9]
  end
end
